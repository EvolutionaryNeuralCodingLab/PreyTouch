"""new_trial_definition

Revision ID: 6a8afdc0a5f8
Revises: 97ae2b7a5040
Create Date: 2022-09-17 16:02:55.085600

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6a8afdc0a5f8'
down_revision = '97ae2b7a5040'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('bug_positions')
    op.drop_table('trial_times')
    op.add_column('strikes', sa.Column('is_reward_bug', sa.Boolean(), nullable=True))
    op.add_column('strikes', sa.Column('is_climbing', sa.Boolean(), nullable=True))
    op.add_column('strikes', sa.Column('bug_x', sa.Float(), nullable=True))
    op.add_column('strikes', sa.Column('bug_y', sa.Float(), nullable=True))
    op.add_column('strikes', sa.Column('bug_size', sa.Integer(), nullable=True))
    op.add_column('strikes', sa.Column('in_block_trial_id', sa.Integer(), nullable=True))
    op.drop_constraint('strikes_trial_id_fkey', 'strikes', type_='foreignkey')
    op.drop_constraint('strikes_experiment_id_fkey', 'strikes', type_='foreignkey')
    op.drop_column('strikes', 'trial_id')
    op.drop_column('strikes', 'experiment_id')
    op.add_column('temperatures', sa.Column('block_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'temperatures', 'blocks', ['block_id'], ['id'])
    op.add_column('trials', sa.Column('in_block_trial_id', sa.Integer(), nullable=True))
    op.add_column('trials', sa.Column('bug_trajectory', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('trials', sa.Column('video_frames', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.drop_column('trials', 'trial_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('trials', sa.Column('trial_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_column('trials', 'video_frames')
    op.drop_column('trials', 'bug_trajectory')
    op.drop_column('trials', 'in_block_trial_id')
    op.drop_constraint(None, 'temperatures', type_='foreignkey')
    op.drop_column('temperatures', 'block_id')
    op.add_column('strikes', sa.Column('experiment_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('strikes', sa.Column('trial_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('strikes_experiment_id_fkey', 'strikes', 'experiments', ['experiment_id'], ['id'])
    op.create_foreign_key('strikes_trial_id_fkey', 'strikes', 'trials', ['trial_id'], ['id'])
    op.drop_column('strikes', 'in_block_trial_id')
    op.drop_column('strikes', 'bug_size')
    op.drop_column('strikes', 'bug_y')
    op.drop_column('strikes', 'bug_x')
    op.drop_column('strikes', 'is_climbing')
    op.drop_column('strikes', 'is_reward_bug')
    op.create_table('trial_times',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('duration', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bug_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('trial_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='trial_times_pkey')
    )
    op.create_table('bug_positions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('x', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('y', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('trial_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['trial_id'], ['trials.id'], name='bug_positions_trial_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='bug_positions_pkey')
    )
    # ### end Alembic commands ###
