"""enhance_block_experiment

Revision ID: 97ae2b7a5040
Revises: 
Create Date: 2022-09-13 17:41:08.150519

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '97ae2b7a5040'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('trial_times',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('bug_type', sa.String(), nullable=True),
    sa.Column('trial_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('trials',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('trial_id', sa.Integer(), nullable=True),
    sa.Column('block_id', sa.Integer(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('bug_positions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('time', sa.DateTime(), nullable=True),
    sa.Column('x', sa.Float(), nullable=True),
    sa.Column('y', sa.Float(), nullable=True),
    sa.Column('trial_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['trial_id'], ['trials.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('positions')
    op.add_column('blocks', sa.Column('num_trials', sa.Integer(), nullable=True))
    op.add_column('blocks', sa.Column('trial_duration', sa.Integer(), nullable=True))
    op.add_column('blocks', sa.Column('iti', sa.Integer(), nullable=True))
    op.add_column('blocks', sa.Column('block_type', sa.String(), nullable=True))
    op.add_column('blocks', sa.Column('bug_types', sa.String(), nullable=True))
    op.add_column('blocks', sa.Column('bug_speed', sa.Integer(), nullable=True))
    op.add_column('blocks', sa.Column('bug_size', sa.Integer(), nullable=True))
    op.add_column('blocks', sa.Column('is_default_bug_size', sa.Boolean(), nullable=True))
    op.add_column('blocks', sa.Column('exit_hole', sa.String(), nullable=True))
    op.add_column('blocks', sa.Column('reward_type', sa.String(), nullable=True))
    op.add_column('blocks', sa.Column('reward_bugs', sa.String(), nullable=True))
    op.add_column('blocks', sa.Column('reward_any_touch_prob', sa.Float(), nullable=True))
    op.add_column('blocks', sa.Column('media_url', sa.String(), nullable=True))
    op.add_column('blocks', sa.Column('movement_type', sa.String(), nullable=True))
    op.add_column('blocks', sa.Column('is_anticlockwise', sa.Boolean(), nullable=True))
    op.add_column('blocks', sa.Column('target_drift', sa.String(), nullable=True))
    op.add_column('blocks', sa.Column('bug_height', sa.Integer(), nullable=True))
    op.add_column('blocks', sa.Column('time_between_bugs', sa.Integer(), nullable=True))
    op.add_column('blocks', sa.Column('background_color', sa.String(), nullable=True))
    op.add_column('experiments', sa.Column('cameras', sa.String(), nullable=True))
    op.add_column('experiments', sa.Column('num_blocks', sa.Integer(), nullable=True))
    op.add_column('experiments', sa.Column('extra_time_recording', sa.Integer(), nullable=True))
    op.add_column('strikes', sa.Column('experiment_id', sa.Integer(), nullable=True))
    op.add_column('strikes', sa.Column('trial_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'strikes', 'trials', ['trial_id'], ['id'])
    op.create_foreign_key(None, 'strikes', 'experiments', ['experiment_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'strikes', type_='foreignkey')
    op.drop_constraint(None, 'strikes', type_='foreignkey')
    op.drop_column('strikes', 'trial_id')
    op.drop_column('strikes', 'experiment_id')
    op.drop_column('experiments', 'extra_time_recording')
    op.drop_column('experiments', 'num_blocks')
    op.drop_column('experiments', 'cameras')
    op.drop_column('blocks', 'background_color')
    op.drop_column('blocks', 'time_between_bugs')
    op.drop_column('blocks', 'bug_height')
    op.drop_column('blocks', 'target_drift')
    op.drop_column('blocks', 'is_anticlockwise')
    op.drop_column('blocks', 'movement_type')
    op.drop_column('blocks', 'media_url')
    op.drop_column('blocks', 'reward_any_touch_prob')
    op.drop_column('blocks', 'reward_bugs')
    op.drop_column('blocks', 'reward_type')
    op.drop_column('blocks', 'exit_hole')
    op.drop_column('blocks', 'is_default_bug_size')
    op.drop_column('blocks', 'bug_size')
    op.drop_column('blocks', 'bug_speed')
    op.drop_column('blocks', 'bug_types')
    op.drop_column('blocks', 'block_type')
    op.drop_column('blocks', 'iti')
    op.drop_column('blocks', 'trial_duration')
    op.drop_column('blocks', 'num_trials')
    op.create_table('positions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('x', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('y', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('block_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['block_id'], ['blocks.id'], name='positions_block_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='positions_pkey')
    )
    op.drop_table('bug_positions')
    op.drop_table('trials')
    op.drop_table('trial_times')
    # ### end Alembic commands ###
